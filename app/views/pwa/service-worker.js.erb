// https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers

const VERSION = "v0"
const CACHE_KEY = `notes-${VERSION}`

const STATIC_FILES = [
  <%=
    assets = Rails.application.assets.load_path.manifest.transform_values(&:digested_path).sort
      .map { |file| File.join(Rails.configuration.assets.prefix, file) }
      .map { |path| "\"#{path}\"" }

    raw assets.join(",\n  ")
  %>
]

const OFFLINE_PAGE = '/offline'

//-- install

const addFilesToCache = async (key, files) => {
  const cache = await caches.open(key)
  await cache.addAll(files)
}

const putInCache = async (key, request, response) => {
  const cache = await caches.open(key)
  await cache.put(request, response)
}

//-- activate

const deleteCache = async (key) => {
  await caches.delete(key)
}

const deleteOldCaches = async (keyToKeep) => {
  const keys = await caches.keys()
  const cachesToDelete = keys.filter((key) => key !== keyToKeep)
  await Promise.all(cachesToDelete.map(deleteCache))
}

//-- fetch

const log = (request, message) => {
  if (<%= Rails.env.development? %>) {
    console.log(`${message}\n\tmethod=${request.method} url=${request.url}`)
  }
}

const cacheOnly = async (request) => {
  const cache = await caches.open(CACHE_KEY)
  const response = await caches.match(request)

  if (!response) {
    log(request, `[cacheOnly] error, cache miss`)
    return Response.error()
  }

  log(request, `[cacheOnly] fetched cached response`)
  return response
}

const networkFirst = async (event, request) => {
  const url = new URL(request.url)
  const isGetRequest = request.method === "GET"
  const isLocal = url.origin === location.origin
  const isCacheable = isGetRequest && isLocal

  if (!isCacheable) {
    log(request, "[networkFirst] request isn't cachable, fetching from network")
    return fetch(request)
  }

  try {
    const networkResponse = await fetch(request)

    if (networkResponse.ok) {
      event.waitUntil(putInCache(CACHE_KEY, request, networkResponse.clone()))
    }

    log(request, "[networkFirst] returning network response")

    return networkResponse
  } catch (error) {
    const cacheResponse = await caches.match(request)

    if (cacheResponse) {
      log(request, `[networkFirst] response error, returning cached response (error=${error}`)
      return cacheResponse
    }

    log(request, `[networkFirst] response error and cache miss, returning generic error (error=${error}`)

    const offline = await caches.match(OFFLINE_PAGE)

    return offline
  }
}

//-- handlers

// On install, cache static resources and fallback offline page
const installHandler = async () => {
  await addFilesToCache(CACHE_KEY, [...STATIC_FILES, OFFLINE_PAGE])
}

// On update, delete old cache entries
const activateHandler = async () => {
  await deleteOldCaches(CACHE_KEY)
  await clients.claim()
}

// On fetch, intercept to support offline usage
const fetchHandler = async (event) => {
  const request = event.request
  const url = new URL(request.url)
  const isStaticAsset = STATIC_FILES.some((file) => url.pathname == file)

  if (isStaticAsset) {
    return cacheOnly(request)
  }

  return networkFirst(event, request)
}

//-- register handlers

self.addEventListener("install", (event) => {
  event.waitUntil(installHandler())
})

self.addEventListener("activate", (event) => {
  event.waitUntil(activateHandler())
})

self.addEventListener("fetch", (event) => {
  event.respondWith(fetchHandler(event))
})
